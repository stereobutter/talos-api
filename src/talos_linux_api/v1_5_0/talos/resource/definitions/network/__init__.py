# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: resource/definitions/network/network.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import List

import betterproto

from ..... import common as ____common__
from .. import enums as _enums__


@dataclass(eq=False, repr=False)
class AddressSpecSpec(betterproto.Message):
    """AddressSpecSpec describes status of rendered secrets."""

    address: "____common__.NetIpPrefix" = betterproto.message_field(1)
    link_name: str = betterproto.string_field(2)
    family: "_enums__.NethelpersFamily" = betterproto.enum_field(3)
    scope: "_enums__.NethelpersScope" = betterproto.enum_field(4)
    flags: int = betterproto.uint32_field(5)
    announce_with_arp: bool = betterproto.bool_field(6)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class AddressStatusSpec(betterproto.Message):
    """AddressStatusSpec describes status of rendered secrets."""

    address: "____common__.NetIpPrefix" = betterproto.message_field(1)
    local: "____common__.NetIp" = betterproto.message_field(2)
    broadcast: "____common__.NetIp" = betterproto.message_field(3)
    anycast: "____common__.NetIp" = betterproto.message_field(4)
    multicast: "____common__.NetIp" = betterproto.message_field(5)
    link_index: int = betterproto.uint32_field(6)
    link_name: str = betterproto.string_field(7)
    family: "_enums__.NethelpersFamily" = betterproto.enum_field(8)
    scope: "_enums__.NethelpersScope" = betterproto.enum_field(9)
    flags: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BondMasterSpec(betterproto.Message):
    """BondMasterSpec describes bond settings if Kind == "bond"."""

    mode: "_enums__.NethelpersBondMode" = betterproto.enum_field(1)
    hash_policy: "_enums__.NethelpersBondXmitHashPolicy" = betterproto.enum_field(2)
    lacp_rate: "_enums__.NethelpersLacpRate" = betterproto.enum_field(3)
    arp_validate: "_enums__.NethelpersArpValidate" = betterproto.enum_field(4)
    arp_all_targets: "_enums__.NethelpersArpAllTargets" = betterproto.enum_field(5)
    primary_index: int = betterproto.uint32_field(6)
    primary_reselect: "_enums__.NethelpersPrimaryReselect" = betterproto.enum_field(7)
    fail_over_mac: "_enums__.NethelpersFailOverMac" = betterproto.enum_field(8)
    ad_select: "_enums__.NethelpersAdSelect" = betterproto.enum_field(9)
    mii_mon: int = betterproto.uint32_field(10)
    up_delay: int = betterproto.uint32_field(11)
    down_delay: int = betterproto.uint32_field(12)
    arp_interval: int = betterproto.uint32_field(13)
    resend_igmp: int = betterproto.uint32_field(14)
    min_links: int = betterproto.uint32_field(15)
    lp_interval: int = betterproto.uint32_field(16)
    packets_per_slave: int = betterproto.uint32_field(17)
    num_peer_notif: int = betterproto.fixed32_field(18)
    tlb_dynamic_lb: int = betterproto.fixed32_field(19)
    all_slaves_active: int = betterproto.fixed32_field(20)
    use_carrier: bool = betterproto.bool_field(21)
    ad_actor_sys_prio: int = betterproto.fixed32_field(22)
    ad_user_port_key: int = betterproto.fixed32_field(23)
    peer_notify_delay: int = betterproto.uint32_field(24)


@dataclass(eq=False, repr=False)
class BondSlave(betterproto.Message):
    """BondSlave contains a bond's master name and slave index."""

    master_name: str = betterproto.string_field(1)
    slave_index: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BridgeMasterSpec(betterproto.Message):
    """BridgeMasterSpec describes bridge settings if Kind == "bridge"."""

    stp: "StpSpec" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BridgeSlave(betterproto.Message):
    """BridgeSlave contains a bond's master name and slave index."""

    master_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Dhcp4OperatorSpec(betterproto.Message):
    """DHCP4OperatorSpec describes DHCP4 operator options."""

    route_metric: int = betterproto.uint32_field(1)
    skip_hostname_request: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class Dhcp6OperatorSpec(betterproto.Message):
    """DHCP6OperatorSpec describes DHCP6 operator options."""

    duid: str = betterproto.string_field(1)
    route_metric: int = betterproto.uint32_field(2)
    skip_hostname_request: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class HardwareAddrSpec(betterproto.Message):
    """HardwareAddrSpec describes spec for the link."""

    name: str = betterproto.string_field(1)
    hardware_addr: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class HostnameSpecSpec(betterproto.Message):
    """HostnameSpecSpec describes node hostname."""

    hostname: str = betterproto.string_field(1)
    domainname: str = betterproto.string_field(2)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class HostnameStatusSpec(betterproto.Message):
    """HostnameStatusSpec describes node hostname."""

    hostname: str = betterproto.string_field(1)
    domainname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LinkRefreshSpec(betterproto.Message):
    """LinkRefreshSpec describes status of rendered secrets."""

    generation: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class LinkSpecSpec(betterproto.Message):
    """LinkSpecSpec describes spec for the link."""

    name: str = betterproto.string_field(1)
    logical: bool = betterproto.bool_field(2)
    up: bool = betterproto.bool_field(3)
    mtu: int = betterproto.uint32_field(4)
    kind: str = betterproto.string_field(5)
    type: "_enums__.NethelpersLinkType" = betterproto.enum_field(6)
    parent_name: str = betterproto.string_field(7)
    bond_slave: "BondSlave" = betterproto.message_field(8)
    bridge_slave: "BridgeSlave" = betterproto.message_field(9)
    vlan: "VlanSpec" = betterproto.message_field(10)
    bond_master: "BondMasterSpec" = betterproto.message_field(11)
    bridge_master: "BridgeMasterSpec" = betterproto.message_field(12)
    wireguard: "WireguardSpec" = betterproto.message_field(13)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(14)


@dataclass(eq=False, repr=False)
class LinkStatusSpec(betterproto.Message):
    """LinkStatusSpec describes status of rendered secrets."""

    index: int = betterproto.uint32_field(1)
    type: "_enums__.NethelpersLinkType" = betterproto.enum_field(2)
    link_index: int = betterproto.uint32_field(3)
    flags: int = betterproto.uint32_field(4)
    hardware_addr: bytes = betterproto.bytes_field(5)
    broadcast_addr: bytes = betterproto.bytes_field(6)
    mtu: int = betterproto.uint32_field(7)
    queue_disc: str = betterproto.string_field(8)
    master_index: int = betterproto.uint32_field(9)
    operational_state: "_enums__.NethelpersOperationalState" = betterproto.enum_field(
        10
    )
    kind: str = betterproto.string_field(11)
    slave_kind: str = betterproto.string_field(12)
    bus_path: str = betterproto.string_field(13)
    pciid: str = betterproto.string_field(14)
    driver: str = betterproto.string_field(15)
    driver_version: str = betterproto.string_field(16)
    firmware_version: str = betterproto.string_field(17)
    product_id: str = betterproto.string_field(18)
    vendor_id: str = betterproto.string_field(19)
    product: str = betterproto.string_field(20)
    vendor: str = betterproto.string_field(21)
    link_state: bool = betterproto.bool_field(22)
    speed_megabits: int = betterproto.int64_field(23)
    port: "_enums__.NethelpersPort" = betterproto.enum_field(24)
    duplex: "_enums__.NethelpersDuplex" = betterproto.enum_field(25)
    vlan: "VlanSpec" = betterproto.message_field(26)
    bridge_master: "BridgeMasterSpec" = betterproto.message_field(27)
    bond_master: "BondMasterSpec" = betterproto.message_field(28)
    wireguard: "WireguardSpec" = betterproto.message_field(29)
    permanent_addr: bytes = betterproto.bytes_field(30)


@dataclass(eq=False, repr=False)
class NodeAddressFilterSpec(betterproto.Message):
    """NodeAddressFilterSpec describes a filter for NodeAddresses."""

    include_subnets: List["____common__.NetIpPrefix"] = betterproto.message_field(1)
    exclude_subnets: List["____common__.NetIpPrefix"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NodeAddressSpec(betterproto.Message):
    """NodeAddressSpec describes a set of node addresses."""

    addresses: List["____common__.NetIpPrefix"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OperatorSpecSpec(betterproto.Message):
    """OperatorSpecSpec describes DNS resolvers."""

    operator: "_enums__.NetworkOperator" = betterproto.enum_field(1)
    link_name: str = betterproto.string_field(2)
    require_up: bool = betterproto.bool_field(3)
    dhcp4: "Dhcp4OperatorSpec" = betterproto.message_field(4)
    dhcp6: "Dhcp6OperatorSpec" = betterproto.message_field(5)
    vip: "VipOperatorSpec" = betterproto.message_field(6)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class ProbeSpecSpec(betterproto.Message):
    """ProbeSpecSpec describes the Probe."""

    interval: timedelta = betterproto.message_field(1)
    failure_threshold: int = betterproto.int64_field(2)
    tcp: "TcpProbeSpec" = betterproto.message_field(3)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class ProbeStatusSpec(betterproto.Message):
    """ProbeStatusSpec describes the Probe."""

    success: bool = betterproto.bool_field(1)
    last_error: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResolverSpecSpec(betterproto.Message):
    """ResolverSpecSpec describes DNS resolvers."""

    dns_servers: List["____common__.NetIp"] = betterproto.message_field(1)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ResolverStatusSpec(betterproto.Message):
    """ResolverStatusSpec describes DNS resolvers."""

    dns_servers: List["____common__.NetIp"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RouteSpecSpec(betterproto.Message):
    """RouteSpecSpec describes the route."""

    family: "_enums__.NethelpersFamily" = betterproto.enum_field(1)
    destination: "____common__.NetIpPrefix" = betterproto.message_field(2)
    source: "____common__.NetIp" = betterproto.message_field(3)
    gateway: "____common__.NetIp" = betterproto.message_field(4)
    out_link_name: str = betterproto.string_field(5)
    table: "_enums__.NethelpersRoutingTable" = betterproto.enum_field(6)
    priority: int = betterproto.uint32_field(7)
    scope: "_enums__.NethelpersScope" = betterproto.enum_field(8)
    type: "_enums__.NethelpersRouteType" = betterproto.enum_field(9)
    flags: int = betterproto.uint32_field(10)
    protocol: "_enums__.NethelpersRouteProtocol" = betterproto.enum_field(11)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(12)
    mtu: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class RouteStatusSpec(betterproto.Message):
    """RouteStatusSpec describes status of rendered secrets."""

    family: "_enums__.NethelpersFamily" = betterproto.enum_field(1)
    destination: "____common__.NetIpPrefix" = betterproto.message_field(2)
    source: "____common__.NetIp" = betterproto.message_field(3)
    gateway: "____common__.NetIp" = betterproto.message_field(4)
    out_link_index: int = betterproto.uint32_field(5)
    out_link_name: str = betterproto.string_field(6)
    table: "_enums__.NethelpersRoutingTable" = betterproto.enum_field(7)
    priority: int = betterproto.uint32_field(8)
    scope: "_enums__.NethelpersScope" = betterproto.enum_field(9)
    type: "_enums__.NethelpersRouteType" = betterproto.enum_field(10)
    flags: int = betterproto.uint32_field(11)
    protocol: "_enums__.NethelpersRouteProtocol" = betterproto.enum_field(12)
    mtu: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class StpSpec(betterproto.Message):
    """STPSpec describes Spanning Tree Protocol (STP) settings of a bridge."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class StatusSpec(betterproto.Message):
    """StatusSpec describes network state."""

    address_ready: bool = betterproto.bool_field(1)
    connectivity_ready: bool = betterproto.bool_field(2)
    hostname_ready: bool = betterproto.bool_field(3)
    etc_files_ready: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class TcpProbeSpec(betterproto.Message):
    """TCPProbeSpec describes the TCP Probe."""

    endpoint: str = betterproto.string_field(1)
    timeout: timedelta = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TimeServerSpecSpec(betterproto.Message):
    """TimeServerSpecSpec describes NTP servers."""

    ntp_servers: List[str] = betterproto.string_field(1)
    config_layer: "_enums__.NetworkConfigLayer" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class TimeServerStatusSpec(betterproto.Message):
    """TimeServerStatusSpec describes NTP servers."""

    ntp_servers: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class VipEquinixMetalSpec(betterproto.Message):
    """
    VIPEquinixMetalSpec describes virtual (elastic) IP settings for Equinix
    Metal.
    """

    project_id: str = betterproto.string_field(1)
    device_id: str = betterproto.string_field(2)
    api_token: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ViphCloudSpec(betterproto.Message):
    """
    VIPHCloudSpec describes virtual (elastic) IP settings for Hetzner Cloud.
    """

    device_id: int = betterproto.int64_field(1)
    network_id: int = betterproto.int64_field(2)
    api_token: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class VipOperatorSpec(betterproto.Message):
    """VIPOperatorSpec describes virtual IP operator options."""

    ip: "____common__.NetIp" = betterproto.message_field(1)
    gratuitous_arp: bool = betterproto.bool_field(2)
    equinix_metal: "VipEquinixMetalSpec" = betterproto.message_field(3)
    h_cloud: "ViphCloudSpec" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class VlanSpec(betterproto.Message):
    """VLANSpec describes VLAN settings if Kind == "vlan"."""

    vid: int = betterproto.fixed32_field(1)
    protocol: "_enums__.NethelpersVlanProtocol" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class WireguardPeer(betterproto.Message):
    """WireguardPeer describes a single peer."""

    public_key: str = betterproto.string_field(1)
    preshared_key: str = betterproto.string_field(2)
    endpoint: str = betterproto.string_field(3)
    persistent_keepalive_interval: timedelta = betterproto.message_field(4)
    allowed_ips: List["____common__.NetIpPrefix"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WireguardSpec(betterproto.Message):
    """WireguardSpec describes Wireguard settings if Kind == "wireguard"."""

    private_key: str = betterproto.string_field(1)
    public_key: str = betterproto.string_field(2)
    listen_port: int = betterproto.int64_field(3)
    firewall_mark: int = betterproto.int64_field(4)
    peers: List["WireguardPeer"] = betterproto.message_field(5)
