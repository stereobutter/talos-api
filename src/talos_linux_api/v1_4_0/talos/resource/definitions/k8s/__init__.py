# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: resource/definitions/k8s/k8s.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    Dict,
    List,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from ..... import common as ____common__
from .. import proto as _proto__


@dataclass(eq=False, repr=False)
class ApiServerConfigSpec(betterproto.Message):
    """APIServerConfigSpec is configuration for kube-apiserver."""

    image: str = betterproto.string_field(1)
    cloud_provider: str = betterproto.string_field(2)
    control_plane_endpoint: str = betterproto.string_field(3)
    etcd_servers: List[str] = betterproto.string_field(4)
    local_port: int = betterproto.int64_field(5)
    service_cid_rs: List[str] = betterproto.string_field(6)
    extra_args: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    extra_volumes: List["ExtraVolume"] = betterproto.message_field(8)
    environment_variables: Dict[str, str] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    pod_security_policy_enabled: bool = betterproto.bool_field(10)
    advertised_address: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class AdmissionControlConfigSpec(betterproto.Message):
    """AdmissionControlConfigSpec is configuration for kube-apiserver."""

    config: List["AdmissionPluginSpec"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AdmissionPluginSpec(betterproto.Message):
    """
    AdmissionPluginSpec is a single admission plugin configuration Admission
    Control plugins.
    """

    name: str = betterproto.string_field(1)
    configuration: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class AuditPolicyConfigSpec(betterproto.Message):
    """
    AuditPolicyConfigSpec is audit policy configuration for kube-apiserver.
    """

    config: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BootstrapManifestsConfigSpec(betterproto.Message):
    """
    BootstrapManifestsConfigSpec is configuration for bootstrap manifests.
    """

    server: str = betterproto.string_field(1)
    cluster_domain: str = betterproto.string_field(2)
    pod_cid_rs: List[str] = betterproto.string_field(3)
    proxy_enabled: bool = betterproto.bool_field(4)
    proxy_image: str = betterproto.string_field(5)
    proxy_args: List[str] = betterproto.string_field(6)
    core_dns_enabled: bool = betterproto.bool_field(7)
    core_dns_image: str = betterproto.string_field(8)
    dns_service_ip: str = betterproto.string_field(9)
    dns_service_i_pv6: str = betterproto.string_field(10)
    flannel_enabled: bool = betterproto.bool_field(11)
    flannel_image: str = betterproto.string_field(12)
    flannel_cni_image: str = betterproto.string_field(13)
    pod_security_policy_enabled: bool = betterproto.bool_field(14)
    talos_api_service_enabled: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class ConfigStatusSpec(betterproto.Message):
    """ConfigStatusSpec describes status of rendered secrets."""

    ready: bool = betterproto.bool_field(1)
    version: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ControllerManagerConfigSpec(betterproto.Message):
    """
    ControllerManagerConfigSpec is configuration for kube-controller-manager.
    """

    enabled: bool = betterproto.bool_field(1)
    image: str = betterproto.string_field(2)
    cloud_provider: str = betterproto.string_field(3)
    pod_cid_rs: List[str] = betterproto.string_field(4)
    service_cid_rs: List[str] = betterproto.string_field(5)
    extra_args: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    extra_volumes: List["ExtraVolume"] = betterproto.message_field(7)
    environment_variables: Dict[str, str] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class EndpointSpec(betterproto.Message):
    """EndpointSpec describes status of rendered secrets."""

    addresses: List["____common__.NetIp"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExtraManifest(betterproto.Message):
    """ExtraManifest defines a single extra manifest to download."""

    name: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    priority: str = betterproto.string_field(3)
    extra_headers: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    inline_manifest: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ExtraManifestsConfigSpec(betterproto.Message):
    """
    ExtraManifestsConfigSpec is configuration for extra bootstrap manifests.
    """

    extra_manifests: List["ExtraManifest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExtraVolume(betterproto.Message):
    """ExtraVolume is a configuration of extra volume."""

    name: str = betterproto.string_field(1)
    host_path: str = betterproto.string_field(2)
    mount_path: str = betterproto.string_field(3)
    read_only: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class KubeletConfigSpec(betterproto.Message):
    """KubeletConfigSpec holds the source of kubelet configuration."""

    image: str = betterproto.string_field(1)
    cluster_dns: List[str] = betterproto.string_field(2)
    cluster_domain: str = betterproto.string_field(3)
    extra_args: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    extra_mounts: List["_proto__.Mount"] = betterproto.message_field(5)
    extra_config: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(
        6
    )
    cloud_provider_external: bool = betterproto.bool_field(7)
    default_runtime_seccomp_enabled: bool = betterproto.bool_field(8)
    skip_node_registration: bool = betterproto.bool_field(9)
    static_pod_list_url: str = betterproto.string_field(10)
    disable_manifests_directory: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class KubeletSpecSpec(betterproto.Message):
    """KubeletSpecSpec holds the source of kubelet configuration."""

    image: str = betterproto.string_field(1)
    args: List[str] = betterproto.string_field(2)
    extra_mounts: List["_proto__.Mount"] = betterproto.message_field(3)
    expected_nodename: str = betterproto.string_field(4)
    config: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ManifestSpec(betterproto.Message):
    """ManifestSpec holds the Kubernetes resources spec."""

    items: List["SingleManifest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ManifestStatusSpec(betterproto.Message):
    """ManifestStatusSpec describes manifest application status."""

    manifests_applied: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NodeIpConfigSpec(betterproto.Message):
    """NodeIPConfigSpec holds the Node IP specification."""

    valid_subnets: List[str] = betterproto.string_field(1)
    exclude_subnets: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NodeIpSpec(betterproto.Message):
    """NodeIPSpec holds the Node IP specification."""

    addresses: List["____common__.NetIp"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NodeLabelSpecSpec(betterproto.Message):
    """
    NodeLabelSpecSpec represents a label that's attached to a Talos node.
    """

    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NodenameSpec(betterproto.Message):
    """NodenameSpec describes Kubernetes nodename."""

    nodename: str = betterproto.string_field(1)
    hostname_version: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SchedulerConfigSpec(betterproto.Message):
    """SchedulerConfigSpec is configuration for kube-scheduler."""

    enabled: bool = betterproto.bool_field(1)
    image: str = betterproto.string_field(2)
    extra_args: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    extra_volumes: List["ExtraVolume"] = betterproto.message_field(4)
    environment_variables: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class SecretsStatusSpec(betterproto.Message):
    """SecretsStatusSpec describes status of rendered secrets."""

    ready: bool = betterproto.bool_field(1)
    version: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SingleManifest(betterproto.Message):
    """SingleManifest is a single manifest."""

    object: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StaticPodServerStatusSpec(betterproto.Message):
    """
    StaticPodServerStatusSpec describes static pod spec, it contains marshaled
    *v1.Pod spec.
    """

    url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StaticPodSpec(betterproto.Message):
    """
    StaticPodSpec describes static pod spec, it contains marshaled *v1.Pod
    spec.
    """

    pod: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StaticPodStatusSpec(betterproto.Message):
    """StaticPodStatusSpec describes kubelet static pod status."""

    pod_status: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(1)
